name: Deploy Docker on External Docker Master Server (Local with SSH)

on:
  workflow_dispatch:

jobs:
  deploy:
    runs-on: self-hosted

    steps:
      - name: Install PostgreSQL Client on CentOS
        run: |
          echo "üîß Checking if PostgreSQL Client (psql) is installed..."
          if ! command -v psql &> /dev/null
          then
            echo "‚ö†Ô∏è PostgreSQL Client not found. Installing..."
            sudo yum install -y postgresql
          else
            echo "‚úÖ PostgreSQL Client is already installed."
          fi

      - name: Setup PostgreSQL Authentication (Avoid Password Prompts)
        run: |
          echo "üîß Configuring PostgreSQL authentication..."
          echo "192.168.60.67:5001:*:postgres:qaz123" > ~/.pgpass  # Slave (SELECT)
          echo "192.168.60.67:5000:*:postgres:qaz123" >> ~/.pgpass  # Master (INSERT, UPDATE)
          chmod 600 ~/.pgpass

      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Fetch Docker Deployment Info from PostgreSQL via HAProxy (Slave)
        run: |
          echo "üîç Fetching Docker deployment information from PostgreSQL via HAProxy (Slave)..."
          SERVICE_INFO=$(psql -h 192.168.60.67 -p 5001 -U postgres -d solmakasedb -t -w -c \
            "SELECT name, deploy_script FROM ServiceTemplate WHERE name = 'Docker';")

          if [[ -z "$SERVICE_INFO" ]]; then
            echo "‚ùå No deployment information found for Docker!"
            exit 1
          fi

          echo "‚úÖ Found Docker service info: $SERVICE_INFO"
          DEPLOY_SCRIPT=$(echo "$SERVICE_INFO" | awk -F '|' '{print $2}' | xargs)
          echo "üìå Deploy Script Path: $DEPLOY_SCRIPT"

      - name: Copy Deployment Files from DB Server to tmp before transferring to Docker Master
        run: |
          echo "üöÄ Copying Docker files from DB Server (192.168.60.64) to /tmp/docker/..."
          ssh -o StrictHostKeyChecking=no root@192.168.60.64 "mkdir -p /tmp/docker/yaml && cp -r /var/lib/pgsql/data/service_templates/Docker/* /tmp/docker/"

      - name: Fix Permissions on Docker Master Server
        run: |
          echo "üîß Ensuring correct permissions for /tmp/docker on Docker master server..."
          ssh -o StrictHostKeyChecking=no devops@172.16.6.77 "sudo mkdir -p /tmp/docker/yaml && sudo chown -R devops:devops /tmp/docker"

      - name: Copy Deployment Files to Docker Master Server
        run: |
          echo "üöÄ Copying Docker files from /tmp/docker/ on DB Server to Docker Master (172.16.6.77)..."

          scp -o StrictHostKeyChecking=no root@192.168.60.64:/tmp/docker/scripts/docker_compose.sh devops@172.16.6.77:/tmp/docker/docker_compose.sh
          scp -o StrictHostKeyChecking=no root@192.168.60.64:/tmp/docker/yaml/docker-compose.yml devops@172.16.6.77:/tmp/docker/yaml/docker-compose.yml

      - name: Copy docker_env.sh to Docker Master Server
        run: |
          echo "üöÄ Copying docker_env.sh to Docker Master Server (172.16.6.77)..."
          scp -o StrictHostKeyChecking=no root@192.168.60.64:/tmp/docker/docker_env.sh devops@172.16.6.77:/tmp/docker/docker_env.sh

      - name: Source docker_env.sh on Docker Master Server
        run: |
          echo "üîß Making docker_env.sh executable and sourcing it (if needed)..."
          ssh -o StrictHostKeyChecking=no devops@172.16.6.77 "chmod +x /tmp/docker/docker_env.sh"

      - name: Modify docker_compose.sh Path (Fix Incorrect Paths)
        run: |
          echo "üîß Updating docker_compose.sh to use correct path..."
          ssh devops@172.16.6.77 "sed -i 's|/var/lib/postgresql/data/service_templates/Docker/yaml/docker-compose.yml|/tmp/docker/yaml/docker-compose.yml|g' /tmp/docker/docker_compose.sh"

      - name: Execute Docker Compose Script on Docker Master Server
        run: |
          echo "üöÄ Executing Docker Compose script on Docker master server (172.16.6.77)..."
          ssh -o StrictHostKeyChecking=no devops@172.16.6.77 "chmod +x /tmp/docker/docker_compose.sh && /tmp/docker/docker_compose.sh"

      - name: Store Running Docker Containers Information in PostgreSQL
        run: |
          echo "üóÑ Fetching running Docker containers info and storing in PostgreSQL..."

          TEMPLATE_ID=$(psql -h 192.168.60.67 -p 5001 -U postgres -d solmakasedb -t -w -c \
            "SELECT id FROM ServiceTemplate WHERE name = 'Docker';" | xargs)

          if [[ -z "$TEMPLATE_ID" ]]; then
              echo "‚ùå ERROR: No matching ServiceTemplate found for 'Docker'!"
              exit 1
          fi

          echo "üìå Found Template ID: $TEMPLATE_ID"

          # Ïã§Ìñâ Ï§ëÏù∏ Docker Ïª®ÌÖåÏù¥ÎÑà Ïù¥Î¶Ñ Í∞ÄÏ†∏Ïò§Í∏∞
          CONTAINER_NAMES=$(ssh -o StrictHostKeyChecking=no devops@172.16.6.77 \
            "docker ps --format '{{.Names}}'")

          if [[ -z "$CONTAINER_NAMES" ]]; then
              echo "‚ùå ERROR: No running Docker containers found!"
              exit 1
          fi

          echo "‚úÖ Running Containers: $CONTAINER_NAMES"

          # Í∞Å Ïª®ÌÖåÏù¥ÎÑà Ïù¥Î¶ÑÏùÑ PostgreSQLÏóê Ï†ÄÏû•
          for HOSTNAME in $CONTAINER_NAMES; do
              echo "üìå Storing Docker Container: $HOSTNAME in PostgreSQL"

              psql -h 192.168.60.67 -p 5000 -U postgres -d solmakasedb -c \
              "INSERT INTO VM (template_id, hostname, ip_address, status, deploy_method)
               VALUES ($TEMPLATE_ID, '$HOSTNAME', '172.16.6.77', 'running', 'docker')
               ON CONFLICT (hostname) 
               DO UPDATE SET ip_address = EXCLUDED.ip_address, status = 'running', deploy_method = 'docker';"
          done

          echo "‚úÖ Docker Container Information Successfully Stored in PostgreSQL"

